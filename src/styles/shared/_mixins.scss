/* Media queries mixins */

@mixin respond-to($media) {
    @if $media == mobile-sm {
        @media only screen and (max-width: $small-xs - 1) {
            @content;
        }
    } @else if $media == mobile {
        @media only screen and (max-width: $small) {
            @content;
        }
    } @else if $media == mobile-xl {
        @media only screen and (min-width: $small-xs) {
            @content;
        }
    } @else if $media == mobile-large {
        @media only screen and (min-width: $small-xs) and (max-width: $sTablet - 1) {
            @content;
        }
    } @else if $media == desktop {
        @media only screen and (min-width: $desktop) {
            @content;
        }
    } @else if $media == containerWidth {
        @media only screen and (max-width: $containerWidth) {
            @content;
        }
    } @else if $media == MS {
        @media only screen and (min-width: $small + 1) and (max-width: $large - 1) {
            @content;
        }
    } @else if $media == LS {
        @media only screen and (min-width: $large) {
            @content;
        }
    } @else if $media == lTablet {
        @media only screen and (max-width: $lTablet) {
            @content;
        }
    } @else if $media == sTablet {
        @media only screen and (max-width: $sTablet) {
            @content;
        }
    } @else if $media == osTablet {
        @media only screen and (max-width: $sTablet) and (min-width: $small + 1) {
            @content;
        }
    } @else if $media == olTablet {
        @media only screen and (max-width: $lTablet) and (min-width: $sTablet + 1) {
            @content;
        }
    } @else if $media == tablets {
        @media only screen and (max-width: $lTablet) and (min-width: $small + 1) {
            @content;
        }
    } @else if $media == print {
        @media print {
            @content;
        }
    } @else if $media == large {
        @media only screen and (max-width: $large) {
            @content;
        }
    }
}

/* Adds mixins */

@mixin aspect-ratio($width, $height) {
    position: relative;

    &:before {
        content: "";
        display: block;
        width: 100%;
        padding-top: ($height / $width) * 100%;
    }
}

@mixin font($alias, $name, $weight) {
    @font-face {
        font-family: $alias;
        src: url("~~assets/fonts/" + $name + ".woff") format("woff");
        font-weight: $weight;
        font-style: normal;
        font-display: swap;
    }
}

@mixin hover {
    @media (hover), (min-width: 0) {
        @content;
    }
}

@function breakpoint-max($name, $bp) {
    $next: breakpoint-next($name, $bp);

    @return if($next, breakpoint-min($next, $bp) - .02, null);
}

@function breakpoint-min($name, $bp: $breakpoints) {
    $min: map-get($bp, $name);

    @return if($min != 0, $min, null);
}

@function breakpoint-next($name, $bp, $breakpoint-names: map-keys($bp)) {
    $n: index($breakpoint-names, $name);

    @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}
